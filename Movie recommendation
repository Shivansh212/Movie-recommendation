# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import NearestNeighbors

# Sample movie ratings data (user_id, movie_id, rating)
data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3, 4, 4],
    'movie_id': [1, 2, 3, 2, 3, 1, 2, 3, 1, 2],
    'rating': [5, 4, 3, 4, 3, 5, 4, 3, 4, 3]
}

# Creating a DataFrame from the data
df = pd.DataFrame(data)

# Splitting the data into training and testing sets
train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)

# Creating a user-movie matrix
user_movie_matrix = train_data.pivot_table(index='user_id', columns='movie_id', values='rating')

# Filling missing values with 0 (assuming no rating means no interaction)
user_movie_matrix = user_movie_matrix.fillna(0)

# Training a k-nearest neighbors model
knn_model = NearestNeighbors(metric='cosine', algorithm='brute')
knn_model.fit(user_movie_matrix.values)

# Function to get k similar users based on the input user index
def get_similar_users(user_index, k=3):
    distances, indices = knn_model.kneighbors([user_movie_matrix.iloc[user_index].values], n_neighbors=k+1)
    similar_users = [user_movie_matrix.index[i] for i in indices.flatten() if i != user_index]
    return similar_users

# Function to recommend movies to a user based on collaborative filtering
def recommend_movies(user_id, num_recommendations=3):
    similar_users = get_similar_users(user_id)
    movie_ratings = []
    for user in similar_users:
        movies_not_watched = df[(~df['movie_id'].isin(user_movie_matrix.columns)) & (df['user_id'] == user)]
        for index, row in movies_not_watched.iterrows():
            movie_ratings.append((row['movie_id'], row['rating']))
    movie_ratings = sorted(movie_ratings, key=lambda x: x[1], reverse=True)[:num_recommendations]
    return [movie[0] for movie in movie_ratings]

# Example usage:
user_id = 4
recommendations = recommend_movies(user_id)
print(f"Recommended movies for user {user_id}: {recommendations}")
